// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt() @map("update_at")

  email    String  @unique
  name     String?
  password String

  workInterval  Int @default(50) @map("work_interval")
  breakInterval Int @default(20) @map("break_interval")
  countInterval Int @default(10) @map("count_interval")

  tasks      Task[]
  timeBlocks TimeBlock[]
  rounds     PomodoroSession[]

  @@map("user")
}

model Task {
  id       String   @id @default(cuid())
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt() @map("update_at")

  name     String    @unique
  priority Priority?
  isDone   Boolean?  @default(false) @map("is_done")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task")
}

model TimeBlock {
  id       String   @id @default(cuid())
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt() @map("update_at")

  name     String  @unique
  color    String?
  duration Int
  order    Int     @default(1)

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model PomodoroSession {
  id       String   @id @default(cuid())
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt() @map("update_at")

  isDone Boolean? @default(false) @map("is_done")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  rounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id       String   @id @default(cuid())
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt() @map("update_at")

  isDone       Boolean? @default(false) @map("is_done")
  totalSeconds Int      @map("total_seconds")

  pomodoroSession   PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)
  pomodoroSessionId String          @map("pomodoro_session_id")

  @@map("pomodoro_round")
}

enum Priority {
  low
  medium
  high
}
